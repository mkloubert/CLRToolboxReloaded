//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.34014
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarcelJoachimKloubert.CLRToolbox.Libs.DotLiquid.Resources {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MarcelJoachimKloubert.CLRToolbox.Libs.DotLiquid.Resources.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Syntax Error in &apos;assign&apos; tag - Valid syntax: assign [var] = [source] ähnelt.
        /// </summary>
        internal static string AssignTagSyntaxException {
            get {
                return ResourceManager.GetString("AssignTagSyntaxException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Error - This liquid context does not allow includes ähnelt.
        /// </summary>
        internal static string BlankFileSystemDoesNotAllowIncludesException {
            get {
                return ResourceManager.GetString("BlankFileSystemDoesNotAllowIncludesException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Liquid Error - Block &apos;{0}&apos; already defined ähnelt.
        /// </summary>
        internal static string BlockTagAlreadyDefinedException {
            get {
                return ResourceManager.GetString("BlockTagAlreadyDefinedException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die {0} tag does not expect else tag ähnelt.
        /// </summary>
        internal static string BlockTagNoElseException {
            get {
                return ResourceManager.GetString("BlockTagNoElseException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;end&apos; is not a valid delimiter for {0} tags. Use {1} ähnelt.
        /// </summary>
        internal static string BlockTagNoEndException {
            get {
                return ResourceManager.GetString("BlockTagNoEndException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die {0} tag was never closed ähnelt.
        /// </summary>
        internal static string BlockTagNotClosedException {
            get {
                return ResourceManager.GetString("BlockTagNotClosedException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tag &apos;{0}&apos; was not properly terminated with regexp: {1} ähnelt.
        /// </summary>
        internal static string BlockTagNotTerminatedException {
            get {
                return ResourceManager.GetString("BlockTagNotTerminatedException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Syntax Error in &apos;block&apos; tag - Valid syntax: block [name] ähnelt.
        /// </summary>
        internal static string BlockTagSyntaxException {
            get {
                return ResourceManager.GetString("BlockTagSyntaxException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unknown tag &apos;{0}&apos; ähnelt.
        /// </summary>
        internal static string BlockUnknownTagException {
            get {
                return ResourceManager.GetString("BlockUnknownTagException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Variable &apos;{0}&apos; was not properly terminated with regexp: {1} ähnelt.
        /// </summary>
        internal static string BlockVariableNotTerminatedException {
            get {
                return ResourceManager.GetString("BlockVariableNotTerminatedException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Syntax Error in &apos;capture&apos; tag - Valid syntax: capture [var] ähnelt.
        /// </summary>
        internal static string CapureTagSyntaxException {
            get {
                return ResourceManager.GetString("CapureTagSyntaxException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Syntax Error in &apos;case&apos; tag - Valid else condition: {{% else %}} (no parameters) ähnelt.
        /// </summary>
        internal static string CaseTagElseSyntaxException {
            get {
                return ResourceManager.GetString("CaseTagElseSyntaxException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Syntax Error in &apos;case&apos; tag - Valid syntax: case [condition] ähnelt.
        /// </summary>
        internal static string CaseTagSyntaxException {
            get {
                return ResourceManager.GetString("CaseTagSyntaxException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Syntax Error in &apos;case&apos; tag - Valid when condition: {{% when [condition] [or condition2...] %}} ähnelt.
        /// </summary>
        internal static string CaseTagWhenSyntaxException {
            get {
                return ResourceManager.GetString("CaseTagWhenSyntaxException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unknown operator {0} ähnelt.
        /// </summary>
        internal static string ConditionUnknownOperatorException {
            get {
                return ResourceManager.GetString("ConditionUnknownOperatorException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Liquid error: {0} ähnelt.
        /// </summary>
        internal static string ContextLiquidError {
            get {
                return ResourceManager.GetString("ContextLiquidError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Liquid syntax error: {0} ähnelt.
        /// </summary>
        internal static string ContextLiquidSyntaxError {
            get {
                return ResourceManager.GetString("ContextLiquidSyntaxError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Object &apos;{0}&apos; is invalid because it is neither a built-in type nor implements ILiquidizable ähnelt.
        /// </summary>
        internal static string ContextObjectInvalidException {
            get {
                return ResourceManager.GetString("ContextObjectInvalidException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Nesting too deep ähnelt.
        /// </summary>
        internal static string ContextStackException {
            get {
                return ResourceManager.GetString("ContextStackException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Syntax Error in &apos;cycle&apos; tag - Valid syntax: cycle [name :] var [, var2, var3 ...] ähnelt.
        /// </summary>
        internal static string CycleTagSyntaxException {
            get {
                return ResourceManager.GetString("CycleTagSyntaxException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Missing property. Did you mean &apos;{0}&apos;? ähnelt.
        /// </summary>
        internal static string DropWrongNamingConventionMessage {
            get {
                return ResourceManager.GetString("DropWrongNamingConventionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Liquid Error - &apos;extends&apos; tag can be used only once ähnelt.
        /// </summary>
        internal static string ExtendsTagCanBeUsedOneException {
            get {
                return ResourceManager.GetString("ExtendsTagCanBeUsedOneException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Liquid Error - &apos;extends&apos; must be the first tag in an extending template ähnelt.
        /// </summary>
        internal static string ExtendsTagMustBeFirstTagException {
            get {
                return ResourceManager.GetString("ExtendsTagMustBeFirstTagException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Syntax Error in &apos;extends&apos; tag - Valid syntax: extends [template] ähnelt.
        /// </summary>
        internal static string ExtendsTagSyntaxException {
            get {
                return ResourceManager.GetString("ExtendsTagSyntaxException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Liquid Error - Only &apos;comment&apos; and &apos;block&apos; tags are allowed in an extending template ähnelt.
        /// </summary>
        internal static string ExtendsTagUnallowedTagsException {
            get {
                return ResourceManager.GetString("ExtendsTagUnallowedTagsException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Syntax Error in &apos;for&apos; tag - Valid syntax: for [item] in [collection] ähnelt.
        /// </summary>
        internal static string ForTagSyntaxException {
            get {
                return ResourceManager.GetString("ForTagSyntaxException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Syntax Error in &apos;if&apos; tag - Valid syntax: if [expression] ähnelt.
        /// </summary>
        internal static string IfTagSyntaxException {
            get {
                return ResourceManager.GetString("IfTagSyntaxException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Syntax Error in &apos;include&apos; tag - Valid syntax: include [template] ähnelt.
        /// </summary>
        internal static string IncludeTagSyntaxException {
            get {
                return ResourceManager.GetString("IncludeTagSyntaxException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Error - Illegal template name &apos;{0}&apos; ähnelt.
        /// </summary>
        internal static string LocalFileSystemIllegalTemplateNameException {
            get {
                return ResourceManager.GetString("LocalFileSystemIllegalTemplateNameException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Error - Illegal template path &apos;{0}&apos; ähnelt.
        /// </summary>
        internal static string LocalFileSystemIllegalTemplatePathException {
            get {
                return ResourceManager.GetString("LocalFileSystemIllegalTemplatePathException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Error - No such template &apos;{0}&apos; ähnelt.
        /// </summary>
        internal static string LocalFileSystemTemplateNotFoundException {
            get {
                return ResourceManager.GetString("LocalFileSystemTemplateNotFoundException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Error - Filter &apos;{0}&apos; does not have a default value for &apos;{1}&apos; and no value was supplied ähnelt.
        /// </summary>
        internal static string StrainerFilterHasNoValueException {
            get {
                return ResourceManager.GetString("StrainerFilterHasNoValueException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Syntax Error in &apos;tablerow&apos; tag - Valid syntax: tablerow [item] in [collection] cols=[number] ähnelt.
        /// </summary>
        internal static string TableRowTagSyntaxException {
            get {
                return ResourceManager.GetString("TableRowTagSyntaxException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Error - Filter &apos;{0}&apos; in &apos;{1}&apos; could not be found. ähnelt.
        /// </summary>
        internal static string VariableFilterNotFoundException {
            get {
                return ResourceManager.GetString("VariableFilterNotFoundException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die key could not be found ähnelt.
        /// </summary>
        internal static string WeakTableKeyNotFoundException {
            get {
                return ResourceManager.GetString("WeakTableKeyNotFoundException", resourceCulture);
            }
        }
    }
}
